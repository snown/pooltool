#!/usr/bin/env bash
#NAMESPACE=pooltool::commands

dependencies::depends "pooltool/pathtools"
dependencies::depends "pooltool/raidtools"
dependencies::depends "pooltool/commands/find"
dependencies::depends "snown/pansi"
dependencies::depends "snown/here_printf"
dependencies::register_module "pooltool/commands/cp"

function cp::print_summary {
  local col_indent=${1:-0}
  local summary="Hardlink or copy a file or directory into the RAID. Prefers hardlink if the $(snown::pansi --underline "source") already exists in the RAID array."
  local lines
  IFS=$'\n' read -d '' -ra lines <<< "$(fold -w $((80 - ${col_indent})) -s <<< "${summary}")"
  lines[0]="$(bashful trim <<< "${lines[0]}")"
  if [[ ${#lines[@]} -gt 1 ]]; then
    local i
    for (( i = 1; i < ${#lines[@]}; i++ )); do
      lines[i]="$(bashful trim <<< "${lines[i]}")"
      lines[i]="$(bashful repeat ${col_indent} printf " ")${lines[i]}"
    done
    
  fi
  if [[ ${#lines[@]} -gt 1 ]]; then
    local length=$((${#lines[@]} - 1))
    printf "%s\n" "${lines[@]:0:${length}}"
  fi
  printf "%s" "${lines[@]: -1}"
}

function cp::print_help {
  snown::here_printf <<-HELP
$(this::cp::print_summary)

$(snown::pansi --bold "USAGE:")
  pooltool cp [-h|--help]
  pooltool cp <source> <destination>
$(snown::pansi --bold "FLAGS:")
  -h, --help    Print this help message.
$(snown::pansi --bold "ARGUMENTS:")
  <source>      The file or folder that you would like to be copied into the 
                RAID. This file can already be in the RAID, or it can be 
                outside. If you are attempting to move a directory (not just 
                it's contents), ensure that $(snown::pansi --underline "source") does not end in a '/'.
  <destination> The desired location inside the RAID where you want the $(snown::pansi --underline "source") 
                to be copied to. Ending the $(snown::pansi --underline "destination") with a '/' will indicate 
                that you want it to act as a directory in which to place the 
                $(snown::pansi --underline "source"), where as leaving the '/' off will indicate a new name 
                for the $(snown::pansi --underline "source") parameter in it's new location.
HELP
}


function cp {
  local sources=()
  local target
  
  while [[ $# -gt 0 ]]; do
    local _key="$1"
    case "${_key}" in
    -h|--help)
      this::cp::print_help
      exit 0
      ;;
    *)
      if [[ $# -eq 1 ]]; then
        target="${_key}"
      else
        if [[ ! -e "${_key}" ]]; then
          echo "Source item does not exist: $1"
          this::cp::print_help
          exit 1
        fi
        sources+=( "$(pooltool::abspath "${_key}")" )
      fi
    esac
    shift
  done
  
  if [[ ${#sources[@]} -lt 1 ]]; then
    echo "Need at least one source item"
    this::cp::print_help
    exit 1
  fi
  if [[ -z ${target:+x} ]]; then
    echo "Need a target destination"
    this::cp::print_help
    exit 1
  fi
  if ! $(pooltool::is_raid_path "${target}"); then
    echo "Target destination must be in the RAID: \"${RAID_LOCATION}\""
    this::cp::print_help
    exit 1
  fi
  
  local source
  local raid_dest="$(pooltool::abs_target "${target}")"
  if [[ -e "${raid_dest}" ]]; then
    local is_conflict=false
    if [[ "${target}" != *"/" ]]; then
      if ! is_empty_dir "${raid_dest}"; then
        is_conflict=true
      fi
    elif [[ -f "${raid_dest}" ]]; then
      is_conflict=true
    fi
    
    if [[ "${is_conflict}" == true ]]; then
      echo "File exists or Dir not empty at \"${raid_dest}\""
      read -p "would you like to overwrite?[y/N]: " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -r "${raid_dest}"
      else
        exit 1
      fi
    fi
  fi
  
  local _dru_regex='^'"${DRU_MOUNT_POINT}/DRU"'[[:digit:]]+/'
  for source in "${sources[@]}"; do
    local destinations=()
    local flags="-a"
    
    local files_array="$(pooltool::files_from_paths "${source}")"
    local files
    declare -a files="$(echo "${files_array}" | sed "s/^[^(]*// ; s/'$//")"
    
    if $(pooltool::is_raid_path "${source}"); then
      local file
      for file in "${files[@]}"; do
        local rel_file="${file#${source}}"
        local true_file="$(pooltool::commands::find "${file}")"
        local dru_prefix
        if [[ "${true_file}" =~ ${_dru_regex} ]]; then
          dru_prefix="${BASH_REMATCH[0]}"
        fi
        
        local src_basename=""
        if [[ "${source}" != *"/" ]]; then
          src_basename="$(basename "${source}")"
        fi
        
        local destination="$(pooltool::construct_path "${dru_prefix}" "${raid_dest#${RAID_LOCATION}}")"
        if [[ -d "${source}" || ${#sources[@]} -gt 1 || ${#files[@]} -gt 1 || -d "${raid_dest}" || "${raid_dest}" == *"/" ]]; then
          destination="$(pooltool::construct_path "${destination}" "${src_basename}" "${rel_file}")"
        fi
        
        destinations+=( "${destination}" )
      done

      # Hardlink cp
      flags="${flags}l"
    else
      destinations+=( "${files[@]}" )
    fi
    
    for (( i = 0; i < ${#destinations[@]}; i++ )); do
      local destination="${destinations[${i}]}"
      local file="$(pooltool::commands::find "${files[${i}]}")"
      # echo "${destination}"
    
      mkdir -p "$(dirname "${destination}")"
   
      echo "=> cp ${flags} \"${file}\" \"${destination}\""
      cp ${flags} "${file}" "${destination}"
    done
  done
}