#!/bin/bash
#NAMESPACE=dependencies

namespaced MODULE_LIST=()
namespaced PACKAGER_GETTER='packager::get_module'
namespaced BOOTSTRAP_LOADER='bootstrap_load_module'
namespaced BOOTSTRAP_TRACER='bootstrap_trace'
namespaced DEPENDENCY_LIST=()

function set_packager_getter(fn) {
    bootstrap_check_fn_parameters $fn "module_name"
    if [[ $? -eq 0 ]]
    then
        namespaced PACKAGER_GETTER=$fn
    fi
}

function set_bootstrap_loader(fn) {
    namespaced BOOTSTRAP_LOADER=$fn
}

function register_module(module) {
   namespaced MODULE_LIST+=($module)
}

function depends(module) {
    for mod in ${namespaced MODULE_LIST[@]}
    do
        if [[ $mod == $module ]]
        then
            return 0
        fi
    done

    for mod in ${namespaced DEPENDENCY_LIST[@]}
    do
        if [[ $mod == $module ]]
        then
            echo "Circular dependency: `echo ${namespaced DEPENDENCY_LIST[@]} | sed 's/ / => /g'` => $mod"
            ${namespaced BOOTSTRAP_TRACER}
            exit $ERROR_BAD_PROGRAMMER
        fi
    done
    namespaced DEPENDENCY_LIST+=($module)

    ${namespaced BOOTSTRAP_LOADER} $module
    local LOAD_RESULT=$?

    local TEMPLIST=()
    for i in ${!namespaced DEPENDENCY_LIST[@]}
    do
        if [[ `expr $i + 1` -lt ${#namespaced DEPENDENCY_LIST[@]} ]]
        then
            TEMPLIST+=(${namespaced DEPENDENCY_LIST[$i]})
        fi
    done
    namespaced DEPENDENCY_LIST=(${TEMPLIST[@]})

    if [[ $LOAD_RESULT == 0 ]]
    then
        this::register_module $module

        return 0
    fi

    ${namespaced PACKAGER_GETTER} $module
    val=$?
    if [[ $val != 0 ]]
    then
        exit $val
    fi

    ${namespaced BOOTSTRAP_LOADER} $module
    if [[ $? -eq 0 ]]
    then
        this::register_module $module
        return 0
    fi

    echo "Dependency unmet: $module is not loaded"
    ${namespaced BOOTSTRAP_TRACER}
    exit $ERROR_NOT_FOUND
}

this::register_module "core/dependencies"
this::depends "core/packager"